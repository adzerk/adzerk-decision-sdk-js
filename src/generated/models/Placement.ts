/* tslint:disable */
/* eslint-disable */
/**
 * Adzerk Decision API
 * Adzerk Decision API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface Placement
 */
export interface Placement {
  /**
   * A unique name for the placement defined by you
   * @type {string}
   * @memberof Placement
   */
  divName?: string;
  /**
   * The numeric network id
   * @type {number}
   * @memberof Placement
   */
  networkId?: number;
  /**
   * The numeric site id
   * @type {number}
   * @memberof Placement
   */
  siteId?: number;
  /**
   * One or more integer ad types. More info [here](https://dev.adzerk.com/docs/ad-sizes)
   * @type {Array<number>}
   * @memberof Placement
   */
  adTypes?: Array<number>;
  /**
   * Zone IDs to use
   * @type {Array<number>}
   * @memberof Placement
   */
  zoneIds?: Array<number> | null;
  /**
   * A numeric campaign id; if specified, only consider ads in that campaign
   * @type {number}
   * @memberof Placement
   */
  campaignId?: number | null;
  /**
   * A numeric ad (flight-creative map) id; if specified, only serve that ad if possible
   * @type {number}
   * @memberof Placement
   */
  flightId?: number | null;
  /**
   * A numeric ad (flight-creative map) id; if specified, only serve that ad if possible
   * @type {number}
   * @memberof Placement
   */
  adId?: number | null;
  /**
   * The ad's click-through URL
   * @type {string}
   * @memberof Placement
   */
  clickUrl?: string | null;
  /**
   * A map of key/value pairs used for [Custom Targeting](https://dev.adzerk.com/docs/custom-targeting)
   * @type {object}
   * @memberof Placement
   */
  properties?: object | null;
  /**
   * An array of numeric event types. Requests tracking URLs for custom events. See here for [Event Tracking IDs](https://dev.adzerk.com/v1.0/docs/custom-event-tracking)
   * @type {Array<number>}
   * @memberof Placement
   */
  eventIds?: Array<number> | null;
  /**
   * An object that overrides values for an advertiser, campaign, flight or ad. Used especially for header bidding
   * @type {object}
   * @memberof Placement
   */
  overrides?: object | null;
  /**
   * A map of key/value pairs used with [ContentDB](https://dev.adzerk.com/docs/contentdb-1). The format is `"contentKeys": {"schema": "contentKey"}`
   * @type {{ [key: string]: number; }}
   * @memberof Placement
   */
  contentKeys?: { [key: string]: number } | null;
  /**
   * (BETA) The number of ads to return per placement. Integer between 1 and 20
   * @type {number}
   * @memberof Placement
   */
  count?: number | null;
  /**
   * (BETA) If true, fills ads in a multi-winner placement in proportion to the flight's goals
   * @type {boolean}
   * @memberof Placement
   */
  proportionality?: boolean | null;
  /**
   * (BETA) The name of the eCPM Partition that should be used to source eCPM data for auctions
   * @type {string}
   * @memberof Placement
   */
  ecpmPartition?: string | null;
  /**
   * (BETA) The names of the eCPM Partitions that should be used to source eCPM data for auctions
   * @type {Array<string>}
   * @memberof Placement
   */
  ecpmPartitions?: Array<string> | null;
  /**
   *
   * @type {number}
   * @memberof Placement
   */
  eventMultiplier?: number | null;
  /**
   *
   * @type {boolean}
   * @memberof Placement
   */
  skipSelection?: boolean | null;
  /**
   *
   * @type {object}
   * @memberof Placement
   */
  adQuery?: object | null;
  /**
   *
   * @type {number}
   * @memberof Placement
   */
  floorPrice?: number | null;
  /**
   *
   * @type {number}
   * @memberof Placement
   */
  floorCpc?: number | null;
}

export function PlacementFromJSON(json: any): Placement {
  return PlacementFromJSONTyped(json, false);
}

export function PlacementFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): Placement {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    divName: !exists(json, 'divName') ? undefined : json['divName'],
    networkId: !exists(json, 'networkId') ? undefined : json['networkId'],
    siteId: !exists(json, 'siteId') ? undefined : json['siteId'],
    adTypes: !exists(json, 'adTypes') ? undefined : json['adTypes'],
    zoneIds: !exists(json, 'zoneIds') ? undefined : json['zoneIds'],
    campaignId: !exists(json, 'campaignId') ? undefined : json['campaignId'],
    flightId: !exists(json, 'flightId') ? undefined : json['flightId'],
    adId: !exists(json, 'adId') ? undefined : json['adId'],
    clickUrl: !exists(json, 'clickUrl') ? undefined : json['clickUrl'],
    properties: !exists(json, 'properties') ? undefined : json['properties'],
    eventIds: !exists(json, 'eventIds') ? undefined : json['eventIds'],
    overrides: !exists(json, 'overrides') ? undefined : json['overrides'],
    contentKeys: !exists(json, 'contentKeys') ? undefined : json['contentKeys'],
    count: !exists(json, 'count') ? undefined : json['count'],
    proportionality: !exists(json, 'proportionality')
      ? undefined
      : json['proportionality'],
    ecpmPartition: !exists(json, 'ecpmPartition') ? undefined : json['ecpmPartition'],
    ecpmPartitions: !exists(json, 'ecpmPartitions') ? undefined : json['ecpmPartitions'],
    eventMultiplier: !exists(json, 'eventMultiplier')
      ? undefined
      : json['eventMultiplier'],
    skipSelection: !exists(json, 'skipSelection') ? undefined : json['skipSelection'],
    adQuery: !exists(json, 'adQuery') ? undefined : json['adQuery'],
    floorPrice: !exists(json, 'floorPrice') ? undefined : json['floorPrice'],
    floorCpc: !exists(json, 'floorCpc') ? undefined : json['floorCpc'],
  };
}

export function PlacementToJSON(value?: Placement | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    divName: value.divName,
    networkId: value.networkId,
    siteId: value.siteId,
    adTypes: value.adTypes,
    zoneIds: value.zoneIds,
    campaignId: value.campaignId,
    flightId: value.flightId,
    adId: value.adId,
    clickUrl: value.clickUrl,
    properties: value.properties,
    eventIds: value.eventIds,
    overrides: value.overrides,
    contentKeys: value.contentKeys,
    count: value.count,
    proportionality: value.proportionality,
    ecpmPartition: value.ecpmPartition,
    ecpmPartitions: value.ecpmPartitions,
    eventMultiplier: value.eventMultiplier,
    skipSelection: value.skipSelection,
    adQuery: value.adQuery,
    floorPrice: value.floorPrice,
    floorCpc: value.floorCpc,
  };
}
